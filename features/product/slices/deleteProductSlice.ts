import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import { deleteProduct } from '../productAPI'
import { ThunkStatus } from '../../ThunkStatus'

export interface ProductState {
  status: ThunkStatus
  error?: string
}

const initialState: ProductState = {
  status: ThunkStatus.Idle,
}

export const deleteAsync = createAsyncThunk(
  'product/delete',
  async (id: string) => {
    const response = await deleteProduct(parseInt(id))
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const deleteProductSlice = createSlice({
  name: 'deleteProduct',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearData: (state) => {
      state.status = ThunkStatus.Idle
      state.error = undefined
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(deleteAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(deleteAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
      })
      .addCase(deleteAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
  },
})

export const { clearData } = deleteProductSlice.actions

export default deleteProductSlice.reducer
