import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import {
  addProduct,
  deleteProduct,
  editProduct,
  fetchProduct,
  fetchProducts,
} from './productAPI'
import { ProductDto } from './productDtos'
import { ThunkStatus } from '../ThunkStatus'

export interface ProductState {
  product?: ProductDto
  products: ProductDto[]
  deleteStatus: ThunkStatus
  status: ThunkStatus
  error?: string
}

const initialState: ProductState = {
  products: [],
  status: ThunkStatus.Idle,
  deleteStatus: ThunkStatus.Idle,
}

export const fetchProductsAsync = createAsyncThunk(
  'product/fetch',
  async (catalgoueId?: string) => {
    const response = await fetchProducts(catalgoueId)
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const fetchProductAsync = createAsyncThunk(
  'product/fetchOne',
  async (data: { id: string; includePictures: boolean }) => {
    const response = await fetchProduct(data.id, data.includePictures)
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const createProductAsync = createAsyncThunk(
  'product/add',
  async (data: {
    name: string
    description: string
    catalogueId: string
    photoUrls: string[]
  }) => {
    const response = await addProduct({
      name: data.name,
      description: data.description,
      catalogueId: data.catalogueId,
      photoUrls: data.photoUrls,
    })
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const deleteProductAsync = createAsyncThunk(
  'product/delete',
  async (id: string) => {
    const response = await deleteProduct(parseInt(id))
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const editProductAsync = createAsyncThunk(
  'product/edit',
  async (data: {
    id: string
    edited_product: {
      name: string
      description: string
      catalogueId: number
      photoUrls: string[]
    }
  }) => {
    const response = await editProduct(parseInt(data.id), data.edited_product)
    return response
  }
)

export const productsSlice = createSlice({
  name: 'product',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearProductFlag: (state) => {
      state.status = ThunkStatus.Idle
      state.deleteStatus = ThunkStatus.Idle
      state.error = undefined
    },
    clearProductData: (state) => {
      state.products = []
      state.status = ThunkStatus.Idle
      state.error = undefined
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchProductsAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(fetchProductsAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
        state.products = action.payload
      })
      .addCase(fetchProductsAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
      .addCase(fetchProductAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(fetchProductAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
        state.product = action.payload
      })
      .addCase(fetchProductAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
      .addCase(createProductAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(createProductAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
        state.product = action.payload
      })
      .addCase(createProductAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
      .addCase(deleteProductAsync.pending, (state) => {
        state.deleteStatus = ThunkStatus.Loading
      })
      .addCase(deleteProductAsync.fulfilled, (state, action) => {
        state.deleteStatus = ThunkStatus.Success
        state.product = action.payload
      })
      .addCase(deleteProductAsync.rejected, (state, action) => {
        state.deleteStatus = ThunkStatus.Failed
        state.error = action.error.message
      })
  },
})

export const { clearProductFlag, clearProductData } = productsSlice.actions

export default productsSlice.reducer
