import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { fetchCatalogues, fetchCatalogue } from '../catalogueAPI'
import { CatalogueDto } from '../catalogueDtos'
import { ThunkStatus } from '../../ThunkStatus'

export interface CatalogueState {
  catalogues: CatalogueDto[]
  status: ThunkStatus
  error?: string
}

const initialState: CatalogueState = {
  catalogues: [],
  status: ThunkStatus.Idle,
}

export const fetchAsync = createAsyncThunk('catalogue/fetch', async () => {
  const response = await fetchCatalogues()
  // The value we return becomes the `fulfilled` action payload
  return response
})

export const fetchOneAsync = createAsyncThunk(
  'catalogue/fetchOne',
  async (id: string) => {
    const response = await fetchCatalogue(id)
    return response
  }
)

export const catalogueSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearData: (state) => {
      state.catalogues = []
      state.status = ThunkStatus.Idle
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(fetchAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
        state.catalogues = action.payload
        state.error = undefined
      })
      .addCase(fetchAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
  },
})

export const { clearData } = catalogueSlice.actions

export default catalogueSlice.reducer
