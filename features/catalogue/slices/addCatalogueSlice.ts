import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'

import { addCatalogue } from '../catalogueAPI'
import { CatalogueDto } from '../catalogueDtos'
import { ThunkStatus } from '../../ThunkStatus'

export interface ProductState {
  catalogue?: CatalogueDto
  status: ThunkStatus
  error?: string
}

const initialState: ProductState = {
  status: ThunkStatus.Idle,
}

export const createAsync = createAsyncThunk(
  'catalogue/add',
  async (data: { name: string; url: string }) => {
    const response = await addCatalogue(data.name, data.url)
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const addProductSlice = createSlice({
  name: 'addCatalogue',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    clearData: (state) => {
      state.status = ThunkStatus.Idle
      state.catalogue = undefined
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createAsync.pending, (state) => {
        state.status = ThunkStatus.Loading
      })
      .addCase(createAsync.fulfilled, (state, action) => {
        state.status = ThunkStatus.Success
        state.catalogue = action.payload
      })
      .addCase(createAsync.rejected, (state, action) => {
        state.status = ThunkStatus.Failed
        state.error = action.error.message
      })
  },
})

export const { clearData } = addProductSlice.actions

export default addProductSlice.reducer
